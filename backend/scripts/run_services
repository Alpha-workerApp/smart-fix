import subprocess
import time
import os
import signal
import argparse
from typing import List, Optional, Tuple

SERVICES_DIR = "services"
LOG_FILE = "logs/main.log"


def get_available_services() -> List[str]:
    """Returns a list of available service names found in the services directory."""
    available_services = []

    try:
        services_dir = "services"

        available_services = [
            service_name
            for service_name in os.listdir(services_dir)
            if os.path.isdir(os.path.join(services_dir, service_name))
        ]
        return available_services

    except FileNotFoundError:
        print("Error: 'services' directory not found.")
        exit(1)


def clear_log_file():
    """Clears the log file before starting. Creates the file and directory if not found."""
    try:
        with open(LOG_FILE, "w") as f:
            f.truncate()
    except FileNotFoundError:
        os.makedirs("logs", exist_ok=True)
        with open(LOG_FILE, "w") as f:
            f.truncate()
    except Exception as e:
        print(f"Error clearing log file: {e}")


def process_service_arguments(
    args: argparse.Namespace,
) -> Tuple[List[str], Optional[List[str]]]:
    """Processes command-line arguments to determine services to run and Hydra configs for those services."""

    services_to_run: List[str] = []
    hydra_configs: Optional[List[str]] = None

    if len(args.services) == 1 and args.services[0] == "all":
        services_to_run = available_services
    elif len(args.services) > 1 and "all" in args.services:
        print(
            "Error: To run all services only specify 'all' and mention no other service"
        )
        exit(1)
    else:
        services_to_run = args.services

    available_services = get_available_services()

    for service in services_to_run:
        if service not in available_services:
            print(
                f"Error: '{service}' Service not found. Available services: {' '.join(available_services)}"
            )
            exit(1)

    if args.hydra_config:
        hydra_configs = args.hydra_config

    return services_to_run, hydra_configs


def run_service(
    service_name: str, hydra_config: Optional[List[str]] = None
) -> Optional[subprocess.Popen]:
    """Runs a specified service with optional Hydra configuration."""

    module_name = f"services.{service_name}.api"
    command = ["python", "-m", module_name]

    if hydra_config:
        command.extend(hydra_config)

    try:
        process = subprocess.Popen(
            command, stdout=open(LOG_FILE, "a"), stderr=subprocess.STDOUT
        )
        print(f"Started {service_name} ({module_name}). Logs at: {LOG_FILE}")
        return process
    except ModuleNotFoundError:
        print(
            f"Error: Module '{module_name}' not found. Check your 'services' directory and ensure __init__.py is present in the service directory."
        )
        return None
    except Exception as e:
        print(f"Error starting {service_name}: {e}")
        return None


def main():
    parser = argparse.ArgumentParser(description="Run backend microservices.")
    parser.add_argument(
        "services",
        nargs="+",
        help=f"List of services to run (or 'all'). Available services: {' '.join(available_services)}",
    )
    parser.add_argument(
        "-c",
        "--config",
        nargs="+",
        dest="hydra_config",
        help="Hydra configuration options.",
    )

    args: argparse.Namespace = parser.parse_args()

    services_to_run, hydra_configs = process_service_arguments(args)

    clear_log_file()

    processes = []

    for service in services_to_run:
        process = run_service(service, hydra_configs)
        if process:
            processes.append(process)
            time.sleep(1)

    def cleanup(signal, frame):
        print("Stopping services...")
        for process in processes:
            if process.poll() is None:
                process.terminate()
                process.wait()
        print("All services stopped.")
        exit(0)

    signal.signal(signal.SIGINT, cleanup)

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    available_services = get_available_services()

    if available_services:
        main()
    else:
        print("No available services in services directory.")
